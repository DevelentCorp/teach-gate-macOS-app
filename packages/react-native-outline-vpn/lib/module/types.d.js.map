{"version":3,"names":[],"sources":["types.d.ts"],"sourcesContent":["export interface TransportConfig {\n  host: string;\n  port: number;\n  password: string;\n  method: string;\n  prefix?: string;\n}\n\nexport type VPNTransport = string | TransportConfig;\n\nexport interface OnDemandRule {\n  [key: string]: any;\n}\n\nexport interface ConnectivityCheck {\n  url?: string;\n  timeoutMs?: number;\n  intervalMs?: number;\n  [key: string]: any;\n}\n\n/**\n * Outline-Apps style VPN configuration\n * - id: unique tunnel identifier\n * - name: localized description shown in system settings\n * - transport: JSON string or object describing transport (e.g., Shadowsocks fields)\n * - autoConnect: whether to enable on-demand connect behavior\n * - onDemandRules: platform-specific NEOnDemand rules (opaque passthrough)\n * - connectivityCheck: optional connectivity check policy (opaque passthrough)\n */\nexport interface vpnOptions {\n  id: string;\n  name?: string;\n  transport: VPNTransport;\n  autoConnect?: boolean;\n  onDemandRules?: OnDemandRule[];\n  connectivityCheck?: ConnectivityCheck;\n}\n\nexport interface VpnModule {\n  startVpn(options: vpnOptions): Promise<string | boolean>;\n  stopVpn(): Promise<string>;\n  getVpnStatus(): Promise<boolean>;\n}\n\ndeclare const vpnModule: VpnModule;\nexport default vpnModule;\n\nexport type startVPN = (data: vpnOptions) => Promise<string | boolean>;\nexport type getVpnStatus = () => Promise<boolean>;\n"],"mappings":"","ignoreList":[]}