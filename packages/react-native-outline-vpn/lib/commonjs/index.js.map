{"version":3,"names":["_reactNative","require","LINKING_ERROR","Platform","select","ios","macos","default","OutlineVpn","NativeModules","Proxy","get","Error","startVpn","data","Promise","resolve","reject","OS","successMessage","errorMessage","error","getVpnConnectionStatus","isConnected","stopVpn","disconnectVpn","successResult","errorResult","then","result","catch","_default","exports","options","getVpnStatus"],"sources":["index.tsx"],"sourcesContent":["import {NativeModules, Platform} from 'react-native';\nimport {type startVPN, type vpnOptions} from './types';\n\nconst LINKING_ERROR =\n  `The package 'react-native-outline-vpn' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({\n    ios: \"- You have run 'pod install'\\n\",\n    macos: \"- You have run 'pod install'\\n\",\n    default: '',\n  }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo Go\\n';\n\nconst OutlineVpn = NativeModules.OutlineVpn\n  ? NativeModules.OutlineVpn\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      },\n    );\n\nconst startVpn: startVPN = (data: vpnOptions) => {\n  return new Promise(async (resolve, reject) => {\n    if (Platform.OS === 'ios' || Platform.OS === 'macos') {\n      try {\n        await OutlineVpn.startVpn(\n          data,\n          (successMessage: string) => resolve(successMessage),\n          (errorMessage: string) => reject(new Error(errorMessage)),\n        );\n      } catch (error) {\n        reject(error);\n      }\n    } else {\n      // Non-Apple platforms not implemented in this package.\n      resolve(false);\n    }\n  });\n};\n\nconst getVpnConnectionStatus = (): Promise<boolean> => {\n  return new Promise((resolve, reject) => {\n    if (Platform.OS === 'ios' || Platform.OS === 'macos') {\n      OutlineVpn.getVpnConnectionStatus((error: any, isConnected: boolean) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(isConnected);\n        }\n      });\n    } else {\n      // For Android or other platforms, you can return false or implement accordingly\n      resolve(false);\n    }\n  });\n};\n\nconst stopVpn = (): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    if (Platform.OS === 'ios' || Platform.OS === 'macos') {\n      OutlineVpn.disconnectVpn(\n        null,\n        (successResult: any[]) => {\n          resolve(successResult[0]);\n        },\n        (errorResult: any[]) => {\n          reject(new Error(errorResult[0]));\n        },\n      );\n    } else {\n      // Android implementation\n      OutlineVpn.disconnectVpn()\n        .then((result: string) => resolve(result))\n        .catch((error: any) => reject(error));\n    }\n  });\n};\n\nexport default {\n  startVpn(options: vpnOptions): Promise<Boolean | String> {\n    return startVpn(options);\n  },\n  stopVpn(): Promise<string> {\n    return stopVpn();\n  },\n  getVpnStatus(): Promise<boolean> {\n    return getVpnConnectionStatus();\n  },\n};\n"],"mappings":"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","ignoreList":[]}