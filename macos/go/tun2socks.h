/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/Jigsaw-Code/outline-apps/client/go/outline/electron */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 17 "go_plugin.go"

#include <stdlib.h>  // for C.free

// InvokeMethodResult is a struct used to pass result from Go to TypeScript boundary.
typedef struct InvokeMethodResult_t
{
	// A string representing the result of the Go function call.
	// This may be a raw string or a JSON string depending on the API call.
	const char *Output;

	// A string containing a JSON representation of any error that occurred during the
	// Go function call, or NULL if no error occurred.
	// This error can be parsed by the PlatformError in TypeScript.
	const char *ErrorJson;
} InvokeMethodResult;

// CallbackFuncPtr is a C function pointer type that represents a callback function.
// This callback function will be invoked by the Go side.
//
// - data: The callback data, passed as a C string (typically a JSON string).
typedef const char* (*CallbackFuncPtr)(const char *data);

// InvokeCallback is a helper function that invokes the C callback function pointer.
//
// This function serves as a bridge, allowing Go to call a C function pointer.
//
// - f: The C function pointer to be invoked.
// - data: A C-string typed data to be passed to the callback.
static const char* InvokeCallback(CallbackFuncPtr f, const char *data) {
  return f(data);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// InvokeMethod is the unified entry point for TypeScript to invoke various Go functions.
//
// The input and output are all defined as string, but they may represent either a raw string,
// or a JSON string depending on the API call.
//
// Check the API name constants comment for more details about the input and output format.
//
extern InvokeMethodResult InvokeMethod(char* method, char* input);

// RegisterCallback registers a new callback function with the [callback.DefaultManager]
// and returns a [callback.Token] number.
//
// The caller can delete the callback by calling [UnregisterCallback] with the returned token.
//
extern int RegisterCallback(CallbackFuncPtr cb);

// UnregisterCallback unregisters the callback from the [callback.DefaultManager]
// identified by the token returned by [RegisterCallback].
//
extern void UnregisterCallback(int token);

// FreeCGoString releases the memory allocated by newCGoString.
// It also accepts null.
//
extern void FreeCGoString(char* s);

#ifdef __cplusplus
}
#endif
