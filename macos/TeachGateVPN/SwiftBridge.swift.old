import Foundation
import NetworkExtension
import os.log

@objc class SwiftBridge: NSObject {
    
    private static let logger = OSLog(subsystem: "com.teachgatedesk.develentcorp.TeachGateVPN", category: "SwiftBridge")
    
    // Simple error creation
    @objc static func newInvalidConfigOutlineErrorWithMessage(_ message: String) -> NSError {
        return NSError(domain: "OutlineVPN", code: 1001, userInfo: [NSLocalizedDescriptionKey: message])
    }
    
    @objc static func newInternalOutlineErrorWithMessage(_ message: String) -> NSError {
        return NSError(domain: "OutlineVPN", code: 1002, userInfo: [NSLocalizedDescriptionKey: message])
    }
    
    @objc static func newOutlineErrorFromNsError(_ error: NSError) -> NSError {
        return error
    }
    
    @objc static func newOutlineErrorFromPlatformError(_ error: Any) -> NSError {
        return NSError(domain: "OutlineVPN", code: 1003, userInfo: [NSLocalizedDescriptionKey: "Platform error"])
    }
    
    @objc static func saveLastErrorWithNsError(_ error: NSError?) {
        // Store error for later retrieval
        if let error = error {
            os_log("VPN Error: %@", log: logger, type: .error, error.localizedDescription)
        }
    }
    
    @objc static func loadLastErrorToIPCResponse() -> Data {
        return "{}".data(using: .utf8) ?? Data()
    }
    
    @objc static func getTunnelNetworkSettings() -> NEPacketTunnelNetworkSettings {
        let settings = NEPacketTunnelNetworkSettings(tunnelRemoteAddress: "10.0.0.1")
        
        // IPv4 settings
        let ipv4Settings = NEIPv4Settings(addresses: ["10.0.0.2"], subnetMasks: ["255.255.255.0"])
        ipv4Settings.includedRoutes = [NEIPv4Route.default()]
        settings.ipv4Settings = ipv4Settings
        
        // DNS settings
        let dnsSettings = NEDNSSettings(servers: ["1.1.1.1", "1.0.0.1"])
        settings.dnsSettings = dnsSettings
        
        return settings
    }
    
    // Simple client creation - return dummy result for now
    @objc static func newClientWithId(_ tunnelId: String, transportConfig: String) -> UnsafeMutableRawPointer? {
        // Return a dummy pointer for testing - this should be replaced with real client creation
        // For comprehensive VPN testing, this would parse the Shadowsocks config and create a real client
        return UnsafeMutableRawPointer(bitPattern: 1) // Non-null dummy pointer
    }
}