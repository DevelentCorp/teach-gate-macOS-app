===== BEGIN package.json =====
{
  "name": "TeachGateDeskApp",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "android": "react-native run-android",
    "ios": "react-native run-ios",
    "lint": "eslint .",
    "start": "react-native start",
    "test": "jest"
  },
  "dependencies": {
    "@react-native-async-storage/async-storage": "^2.2.0",
    "@react-navigation/native": "^7.1.14",
    "@react-navigation/native-stack": "^7.3.21",
    "@react-navigation/stack": "^7.4.2",
    "axios": "^1.10.0",
    "base-64": "^1.0.0",
    "jwt-decode": "^4.0.0",
    "lucide-react-native": "^0.525.0",
    "react": "19.0.0",
    "react-native": "0.78.3",
    "react-native-gesture-handler": "^2.27.2",
    "react-native-macos": "^0.78.3",
    "react-native-reanimated": "^3.18.0",
    "react-native-safe-area-context": "^5.5.2",
    "react-native-screens": "^4.13.1",
    "react-native-vector-icons": "^10.2.0",
    "react-native-webview": "^13.15.0"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@babel/preset-env": "^7.25.3",
    "@babel/runtime": "^7.25.0",
    "@react-native-community/cli": "15.0.1",
    "@react-native-community/cli-platform-android": "15.0.1",
    "@react-native-community/cli-platform-ios": "15.0.1",
    "@react-native/babel-preset": "0.78.3",
    "@react-native/eslint-config": "0.78.3",
    "@react-native/metro-config": "0.78.3",
    "@react-native/typescript-config": "0.78.3",
    "@types/jest": "^29.5.13",
    "@types/react": "^19.0.0",
    "@types/react-native-vector-icons": "^6.4.18",
    "@types/react-test-renderer": "^19.0.0",
    "eslint": "^8.19.0",
    "jest": "^29.6.3",
    "prettier": "2.8.8",
    "react-test-renderer": "19.0.0",
    "typescript": "5.0.4"
  },
  "engines": {
    "node": ">=18"
  }
}
===== END package.json =====
===== BEGIN .eslintrc.js =====
module.exports = {
  root: true,
  extends: '@react-native',
};
===== END .eslintrc.js =====
----- MISSING: .eslintrc.cjs -----
----- MISSING: .eslintrc.json -----
----- MISSING: .prettierrc -----
===== BEGIN .prettierrc.js =====
module.exports = {
  arrowParens: 'avoid',
  bracketSameLine: true,
  bracketSpacing: false,
  singleQuote: true,
  trailingComma: 'all',
};
===== END .prettierrc.js =====
----- MISSING: .prettierrc.cjs -----
----- MISSING: .prettierrc.json -----
----- MISSING: .prettierrc.yaml -----
----- MISSING: .prettierrc.yml -----
===== BEGIN tsconfig.json =====
{
  "extends": "@react-native/typescript-config/tsconfig.json"
}
===== END tsconfig.json =====
===== BEGIN babel.config.js =====
module.exports = {
  presets: ['module:@react-native/babel-preset'],
};
===== END babel.config.js =====
----- MISSING: babel.config.cjs -----
===== BEGIN jest.config.js =====
module.exports = {
  preset: 'react-native',
};
===== END jest.config.js =====
----- MISSING: jest.config.cjs -----
----- MISSING: jest.config.ts -----
===== BEGIN metro.config.js =====
const {getDefaultConfig, mergeConfig} = require('@react-native/metro-config');

/**
 * Metro configuration
 * https://reactnative.dev/docs/metro
 *
 * @type {import('@react-native/metro-config').MetroConfig}
 */
const config = {};

module.exports = mergeConfig(getDefaultConfig(__dirname), config);
===== END metro.config.js =====
----- MISSING: metro.config.cjs -----
===== BEGIN react-native.config.js =====
module.exports = {
  project: {
    macos: {
      sourceDir: './macos', // tell RN where your macOS project lives
      project: './macos/Teach Gate.xcworkspace', // point to the right workspace
      scheme: 'Teach Gate-macOS', // your scheme
    },
  },
  // Disable autolinking for the old package so it does not get pulled into Pods
  dependencies: {
    'react-native-outline-vpn': {
      platforms: {
        ios: null,
        macos: null,
        android: null,
      },
    },
  },
  assets: ['./src/assets/fonts/'],
};
===== END react-native.config.js =====
===== BEGIN __tests__/App.test.tsx =====
/**
 * @format
 */

import React from 'react';
import ReactTestRenderer from 'react-test-renderer';
import App from '../App';

test('renders correctly', async () => {
  await ReactTestRenderer.act(() => {
    ReactTestRenderer.create(<App />);
  });
});
===== END __tests__/App.test.tsx =====
===== BEGIN src/App.tsx =====
import React from 'react';
import {NavigationContainer} from '@react-navigation/native';
import RootNavigator from './navigation/RootNavigator';
import {Platform} from 'react-native';
import {AuthProvider} from './context/AuthContext';

if (Platform.OS !== 'macos') {
  try {
    const {enableScreens} = require('react-native-screens');
    enableScreens();
  } catch (e) {
    console.warn('react-native-screens not available:', e);
  }
}

const App = () => {
  return (
    <NavigationContainer>
      <AuthProvider>
        <RootNavigator />
      </AuthProvider>
    </NavigationContainer>
  );
};

export default App;
===== END src/App.tsx =====
----- MISSING: src/index.tsx -----
----- MISSING: index.macos.js -----
===== BEGIN index.js =====
import 'base-64';
import {AppRegistry} from 'react-native';
import App from './src/App';
import {name as appName} from './app.json';

AppRegistry.registerComponent(appName, () => App);
===== END index.js =====
